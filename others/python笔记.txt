#!/usr/bin/env python
# -*- coding: utf-8 -*-

1.函数定义
def 函数名(参数)
  函数体
  
2.函数体内使用全局变量需要添加 global关键字

3.常用函数：
  print
  range(初始值, 终止值, 步长)
  rawinput("请输入：")
  int("123")
  len("abc")
  str(1000)
  内置函数
  int(x[,base])
  long(x[,base])
  float(x)
  str(x)
  repr(x)
  eval(str)
  tuple(s)
  set(s)
  dict(d)
  frozenset(s)
  chr(x)
  unichr(x)
  ord(x)
  hex(x)
  oct(x)
  map(函数， 序列) #该函数将序列作为参数传递给函数进行运算，将运算结果放入到返回序列中
  reduce(函数， 序列) #函数必须接受两个参数，reduce会将序列中的元素两两运算
  

4.容器(列表[List]、元组[trupe]、字典[dict])
列表：
  a=[] 声明列表
  a.append(元素)
  a.insert(位置, 元素)
  a.remove(元素)  只会删除第一个 
  a.index(元素, 开始, 结束) 返回匹配到的第一个元素的索引
  a[0] 引用元素
  a[-1] 引用最后一个元素
元组：元组和列表很相似，唯一的区别就是元组定义好之后，就不能再改动了
  a=(元素1, 元素2, 元素3...)
  如果元组只有一个元素时a=(1,) 需要添加逗号
字典：字典就像java中的map,根据一个键来对应一个对象
  a={}
  a={k1:v1, k2:v2}

5.模块：模块是现代程序组织中所不可缺少的，每个.py文件就是一个模块。每个模块实现相对独立的功能，当需要使用这些模块的时候，只要通过import指令导入即可，而不需要重复造轮子
常用的标准模块：
sys
  sys.argv  程序的入口参数，是一个列表
  sys.path  装在模块的搜索路径，是一个列表
  sys.version python的版本，是一个string
  sys.exit(status)  退出程序，是一个函数
time
  time.sleep(n) 休息n秒，可以是小数
  time.time() 返回一个浮点数，从1970-1-1 00:00:00 到当前绝对时间秒数，还有8位小数
  time.locatime(second) 返回一个元组，如果没有second，就使用time.time()返回的秒数
  time.strftime(format) 时间格式化
os 
  os.name 字符串指示你正在使用的平台，Windows->nt Linux/Unix->posix
  os.getcwd() 函数得到当前的工作目录，即当前Python脚本工作的目录路径
  os.getenv()和os.putenv() 函数分别来读取和设置环境变量
  os.listdir()  返回指定目录下的所有文件和目录名
  os.remove()   函数用来删除一个文件
  os.system()   函数用来运行shell命令
md5 
  md5.new(arg)  arg要md5的内容，返回一个md5对象
  digest()  摘要，返回16个字节
  hexdigest() 16禁止摘要，返回32个字节
更多的模块，可以参考python自带的 doc\python.chm的章节library reference
学习模块的最好方法就是进入到python的交互shell中，然后尝试
   
6.文件操作 
open(文件名[, mode]) 返回一个文件对象
mode:
  "r",  读模式
  "w",  写模式
  "r+", 读写模式
文件对象的方法 
  file.read(size) 读取文件的size个字节，返回一个string对象，如果没有设置size,则读取整个文件
  file.readLine() 读取一行，返回一个string对象，如果返回的内容为空，则说明文件结束Eof
  file.readlines()  读取所有行，返回一个list
  file.write(buffer)  写buffer的内容到文件中
  file.flush()  强制写入缓冲区的内容到文件
  file.seek(offset[, flag]) 定位文件读写的光标
    offset  偏移量
    flag  标志：   os.SEEK_SET or 0  从文件头算起，缺省方式
                  os.SEEK_CUR or 1  从当前位置算起
                  os.SEEK_END or 2  从结束处算起
  file.close()  关闭文件
文件属性：
  file.name 文件名
  file.mode 文件打开的模式
  
7.数据库编程：python的DB-API和java的JDBC类似，都是一个规范，定义了python中如何操作数据库的数据，然后由不同的数据库去实现不同的模块(jdbc里叫驱动)
  conect(参数1, 参数2, 参数3...)用来连接数据库，返回一个数据库连接对象Connection
  Connection对象 
    close() 关闭与数据库的连接，如果有数据没有提交，这部分数据就撤销掉
    commit()  提交该连接的所有没有提交的事务，如果数据库支持自动提交，那么最初应该是关掉这个功能的，数据库模块可以提供方法来打开自动提交功能
    rollback()  撤销该连接的事务
    cursor()  返回一个数据库游标，用来执行具体的数据库操作
  Cursor对象
    description 只读属性，用来描述游标
    close() 关闭游标
    execute(sql[,参数])预编译或者执行一个sql(查询或者dml,ddl)如果是预编译，则需要提供一个序列活字典去绑定sql中的变量
    executemany(sql, obj) 预编译一个sql(dml),并且执行它，它关联的所有参数序列或者字典在序列obj中
    fetchone()  取下一行记录，如果为Nnne则表示记录已经读取完了
    fetchall()  读取所有记录
    arraysize 可读写属性，用来设置fetchmany()读取记录行数，缺省为1
    fetchmany(size) 读取size条记录，如果没有size就以.arraysize的设置为准，如果有size, .arraysize就等于size
    setinputsize(sizes) 设置输入大小，用来处理blob等大字段，用在execute或executemany前面
    setoutputsize(size[, column]) 设置输出大小，用来处理blob等大字段，用在execute或executemany前面
    
8.oracle(cx_Oracle): cx_Oracle是python的oracle模块，使用前需要安装oracle的instantclient
  连接数据库代码
    >>>import cx_Oracle
    >>>conn = cx_Oracle.connect('gjw/gjw@133.13.11.102:1521/OCL')
    >>>
    
9.占位符
  %d	整数
  %f	浮点数
  %s	字符串
  %x	十六进制整数
  
10.条件判断
  if <条件判断1>:
      <执行1>
  elif <条件判断2>:
      <执行2>
  else:
      <执行3>
  
11.循环语句
  count=0
  while(count<9):
    print ""
    count = count+1
  print "end!"
  
12.如何判断一个对象是否可迭代
  >>>from collections import Iterable
  >>>isinstance("abc", Iterable)
  >>>isinstance(1, Iterable)
  
  
